import { useState, useEffect, useRef } from 'react';
import './App.css';
import TaskForm from './TaskForm.js';
import TaskListDisplay from './TaskListDisplay';

function App() {

  const [toDoListArray, setToDoListArray] = useState(() => {
    return JSON.parse(localStorage.getItem("taskStorage")) || [];
  });
  const [taskId, setTaskId] = useState(() => {
    const storedTasks = JSON.parse(localStorage.getItem("taskStorage")) || [];
    return storedTasks.length > 0
      ? Math.max(...storedTasks.map((task) => task.id)) + 1
      : "";
  });
  const [taskTitle, setTaskTitle] = useState("");
  const [dateInput, setDateInput] = useState("");
  const [taskStatus, setTaskStatus] = useState("Pending");
  const [taskDescription, setTaskDescription] = useState("");
  const [query, setQuery] = useState("");
  const [taskFormIsDisplayed, setTaskFormIsDisplayed] = useState(false);
  const [isAddTaskClicked, setAddTaskClicked] = useState(false);

  const createAndUpdateTask = () => {
    if (!taskTitle || !dateInput){
        const prompt = !taskTitle.value ? "Please input a title" : !dateInput.value ? "Please input a date" : "";
        alert(prompt);
        return; 
    }

    const existingId = parseInt(taskId);
    const existingItemIndex = toDoListArray.findIndex(item => item.id === existingId);
    const updatedTasks = [...toDoListArray];
    
    if (existingItemIndex === -1){
      const newId = toDoListArray.length > 0
        ? Math.max(...toDoListArray.map((task) => task.id)) + 1
        : 0;

      console.log("Task ID doesn't exist. Creating id for new task...");
      // console.log(`taskId: ${newId}`);
      // console.log(`typeof taskId: ${typeof newId}`);

      const task = {
        title: taskTitle,
        date: dateInput,
        status: taskStatus,
        description: taskDescription,
        id: newId,
      };

      setToDoListArray((prevTasks) => [...prevTasks, task]);
      setTaskId(newId + 1);
    } else {
      console.log("Task ID already exists, will edit existing task");
      // const existingItem = toDoListArray.find(item => item.id === existingId);
      // console.log(`existingId: ${existingId}`);
      // console.log(`typeof existingId: ${typeof existingId}`);
      // console.log(`existingItem: ${JSON.stringify(existingItem)}`);
        updatedTasks[existingItemIndex] = {
          title: taskTitle,
          date: dateInput,
          status: taskStatus,
          description: taskDescription,
          id: existingId,
        };
        setToDoListArray(updatedTasks);
      }   
      
      setTaskId("");
      clearInputFields();
      console.log("createAndUpdateTask called");
  }

  const formatDate = (userInputDate) => {
    const rawUserInput = Date.parse(userInputDate);
    const convertedUserInput = new Date(rawUserInput);
    const monthName = ["January", "February", "March", "April", 
                        "May", "June", "July", "August", 
                        "September", "October", "November", "December"];
    const year = convertedUserInput.getFullYear();
    const month = convertedUserInput.getMonth();
    const day = convertedUserInput.getDate();

    return `${monthName[month - 1]} ${day} ,${year}`;
  }

  const editTask = (idToBeEdited) => {  
    const currentItem = toDoListArray.find(item => item.id == idToBeEdited);
    console.log(`Current Item: ${JSON.stringify(currentItem, null, 2)}`);

    if (!currentItem) {
        console.warn("No task found for ID:", idToBeEdited);
        return;
    } 
    setTaskTitle(currentItem.title);
    setDateInput(currentItem.date);
    setTaskStatus(currentItem.status);
    setTaskDescription(currentItem.description);
    setTaskId(currentItem.id);
    setTaskFormIsDisplayed(true);
  }

  const deleteTask = (idToBeDeleted) => {
    console.log(`Id to be deleted: ${idToBeDeleted}`);
    console.log(typeof idToBeDeleted);
    setToDoListArray(prev => prev.filter(item => item.id !== idToBeDeleted));
  }

  const updateQuery = (e) => {
    setQuery(e.target.value);
  };

  // const filterTasks = (e) => {
  //   toDoListArray.filter((item) => 
  //     item.id.toLowerCase.includes(query) || 
  //     item.id == query
  //   );
  // }

// Generated by AI, I asked chatgpt for help as I couldn't figure out how to combine both 
// UpdateQuery and the filtered List, code above is my previous attempt
const filteredList =
  query.trim() !== ""
    ? toDoListArray.filter((item) =>
        item.title.toLowerCase().includes(query.toLowerCase()) ||
        item.id.toString() === query
      )
    : toDoListArray;

  const clearInputFields = () => {
    setTaskTitle("");
    setDateInput("");
    setTaskStatus("Pending");
    setTaskId("");
    setTaskDescription("");
  }

  const addNewItem = () => {
    setAddTaskClicked(true);
    displayPanel();
    clearInputFields();
  }

  const displayPanel = (e) => {
    setTaskFormIsDisplayed(true);
  }

  const hidePanel = (e) => {
    setAddTaskClicked(false);
    setTaskFormIsDisplayed(false);
  }

  // Updates the localStorage everytime there are changes to toDoListArray
useEffect(() => {
  console.log("Updating localStorage with:", toDoListArray);
  localStorage.setItem("taskStorage", JSON.stringify(toDoListArray));
}, [toDoListArray]);

  return (
    <div className="background">
      <div className="body">
          <header className="flex-center">
              <section className="flex-center">
                  <h1 className="title">To Do List</h1>
                  <i className="fa-solid fa-plus" id="add-task-button" onClick={addNewItem}></i>
              </section>

              <div className="search-bar-container">
                <i class="fa-solid fa-magnifying-glass"></i>
                <input 
                  type="text" 
                  id="search-bar" 
                  name="search-bar" 
                  placeholder="Search by Title or ID"
                  value={query}
                  onChange={(e) => {
                    const value = e.target.value;
                    setQuery(value);
                  }}
                />
              </div>
          </header>

          <main className="flex-center">
            {taskFormIsDisplayed && (
            <TaskForm 
            taskTitle={taskTitle}
            setTaskTitle={setTaskTitle}
            dateInput={dateInput}
            setDateInput={setDateInput}
            taskStatus={taskStatus}
            setTaskStatus={setTaskStatus}
            taskId={taskId}
            setTaskId={setTaskId}
            taskDescription={taskDescription}
            setTaskDescription={setTaskDescription}
            createAndUpdateTask={createAndUpdateTask}
            deleteTask={deleteTask}
            hidePanel={hidePanel}
            isAddTaskClicked={isAddTaskClicked}
            />
            )}

            <TaskListDisplay
            toDoListArray={filteredList}
            formatDate={formatDate}
            editTask={editTask}
            />
          </main>
      </div>
    </div>
  );
}

export default App;