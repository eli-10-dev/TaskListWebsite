const searchBar = document.getElementById("search-bar");
const taskPanel = document.getElementById("task-panel");
const taskItemList = document.getElementById("task-item-list");
const taskItem = document.getElementById("task-item");

// Buttons
const addTaskButton = document.getElementById("add-task-button");
const exitButton = document.getElementById("exit-button");
const submitButton = document.getElementById("submit-button");
const deleteTaskButton = document.getElementById("delete-button");

// Task form
const taskTitle = document.getElementById("title");
const dateInput = document.getElementById("date");
const taskStatus = document.getElementById("status");
const description = document.getElementById("description");
const taskId = document.getElementById("task-id");

const toDoListArray = JSON.parse(localStorage.getItem("taskStorage")) || [];
// console.log(`Data type of local storage: ${typeof storageLength}`);
// console.log(`Local Storage length: ${storageLength}`);

// I asked chatgpt for help for the setTaskId, my idea was to set it to the latest index in the toDoListArray
// However, deleting the values in between will cause errors
let setTaskId = toDoListArray.length > 0
    // Explain what Math.max does
    ? Math.max(...toDoListArray.map(task => task.id)) + 1 
    : 0;

const createAndUpdateTask = (e) => {
    // Prevents the page from reloading.
    // The page reloads because of the button with type="Submit"
    e.preventDefault(); 

    if (!taskTitle.value || !dateInput.value){
        let prompt = !taskTitle.value ? "Please input a title" : !date.value ? "Please input a date" : "";
        alert(prompt);
        return; 
    }

    if (!taskId.innerText){
        console.log("Task ID doesn't exist. Creating id for new task...");
        const task = {
            title: taskTitle.value,
            date: dateInput.value,
            status: taskStatus.value,
            description: description.value,
            id: setTaskId,
        };
        toDoListArray.push(task);
        setTaskId += 1;
    } else {
        console.log("Task ID already exists, will edit existing task");
        const existingId = parseInt(taskId.innerText);
        const existingItem = toDoListArray.find(item => item.id === existingId);
        const existingItemIndex = toDoListArray.findIndex(item => item.id === existingId);

        toDoListArray[existingItemIndex] = {
            title: taskTitle.value,
            date: dateInput.value,
            status: taskStatus.value,
            description: description.value,
            id: existingItem.id,
        }
        // console.log(JSON.stringify(existingItem, null, 2));
        // console.log(`The index of the existing item: ${existingItemIndex}`);
        // console.log(`After: ${JSON.stringify(toDoListArray[existingItemIndex], null, 2)}`);
    }   

    // JSON.stringify(obj, replacer function(?), spaces for indentation)
    // console.log(`To Do List Array: \n ${JSON.stringify(toDoListArray, null, 2)}`);
    localStorage.setItem("taskStorage", JSON.stringify(toDoListArray));
    hidePanel();
    updateToDoDisplay();
    clearInputFields();
}

// See updateToDoDisplay(), this code was generated by AI.
const addEventListeners = () => {
    taskItemList.addEventListener("click", (event) => {
        if (event.target.matches(".task-item")){
            editTask(event.target.id);
        }
    });
}

const editTask = (divId) => {  
    const clickedItemId = parseInt(divId);
    // Find returns the whole object itself, which is better in this case (compared to findIndex)
    // Especially when debugging and logging the contents
    const currentItem = toDoListArray.find(item => item.id === clickedItemId);
    
    if (!currentItem) {
        console.warn("No task found for ID:", clickedItemId);
        return;
    }

    taskTitle.value = currentItem.title;
    dateInput.value = currentItem.date;
    taskStatus.value = currentItem.status;
    taskId.innerText = currentItem.id;
    description.value = currentItem.description;
    
    submitButton.innerHTML = "Update";
    deleteTaskButton.classList.remove("hidden");
    displayPanel();
    // console.log(`ToDoListArray: ${JSON.stringify(toDoListArray, null, 2)}`);
    // console.log(`Data type of clickedItemId: ${typeof clickedItemId}`);
    // console.log(`Clicked Item Id: ${clickedItemId}`);
    // console.log(`currentItem: ${JSON.stringify(currentItem, null, 2)}`);
    formatDate(currentItem.date);
}

const deleteTask = (divId) => {
    const clickedItemId = parseInt(divId);
    const currentItemIndex = toDoListArray.findIndex(item => item.id === clickedItemId);
    toDoListArray.splice(currentItemIndex, 1);
    // console.log(`TaskId: ${divId}`);
    // console.log(`Data type of clickedItemId: ${typeof clickedItemId}`);
    // console.log(`Clicked Item Id: ${clickedItemId}`);
    // console.log(`Current Item Index: ${currentItemIndex}`);
    // console.log(`ToDoListArray after deletion of item: ${JSON.stringify(toDoListArray})`);

    localStorage.setItem("taskStorage", JSON.stringify(toDoListArray));
    updateToDoDisplay();
    hidePanel();
}

const formatDate = (userInputDate) => {
    const rawUserInput = Date.parse(userInputDate);
    const convertedUserInput = new Date(rawUserInput);
    const monthName = ["January", "February", "March", "April", 
                        "May", "June", "July", "August", 
                        "September", "October", "November", "December"];
    const year = convertedUserInput.getFullYear();
    const month = convertedUserInput.getMonth();
    const day = convertedUserInput.getDate();

    // console.log(userInputDate); // yyyy-mm-dd
    // console.log(`Raw date: ${rawUserInput}`);
    // console.log(`Converted date: ${convertedUserInput}`);
    // console.log(day, month, year);
    return `${monthName[month - 1]} ${day} ,${year}`;
}

const updateToDoDisplay = () => {
    taskItemList.innerText = "";
    toDoListArray.forEach(({ title, date, status, id }) => 
    taskItemList.innerHTML += `
    <div class="task-item" id="${id}">
        <section class="title-date-section">
            <h4><b>${title}</b></h4> 
            <h5 class="light">${formatDate(date)}</h5>
            <h5 class="light">ID: ${id}</h5>
        </section>

        <section class="status-section">
            <p class="status-border" 
               style="background-color:${status === "Done" ? "lightgreen" : 
                                         status === "In Progress" ? "yellow" : "red"};">${status}</p>
        </section>
    </div>
    `   
    );

    // My idea of how to add the Event listeners to the eventually generated divs, had to ask AI for help on this one.
    // That is how the addEventListeners() function is created.
    // taskItemList.forEach(item => {
    //     taskItem.addEventListener("click", editTask);
    // });
    addEventListeners();
}

// Updates the display if localStorage has content in it (on startup)
if (toDoListArray.length){
    updateToDoDisplay();
}

const filterTasks = () => {
    if (searchBar.value){
        const matchingItemsArray = toDoListArray.filter(item => item.title.toLowerCase().includes(searchBar.value.toLowerCase()) || item.id == searchBar.value);
        console.log(`Matching items: ${JSON.stringify(matchingItemsArray, null, 2)}`);

        if (matchingItemsArray){
            taskItemList.innerText = "";

            matchingItemsArray.forEach(({ title, date, status, id }) => 
                taskItemList.innerHTML += `
                <div class="task-item" id="${id}">
                    <section class="title-date-section">
                        <h4><b>${title}</b></h4> 
                        <h5 class="light">${formatDate(date)}</h5>
                        <h5 class="light">ID: ${id}</h5>
                    </section>

                    <section class="status-section">
                        <p class="status-border" 
                        style="background-color:${status === "Done" ? "lightgreen" : 
                                                    status === "In Progress" ? "yellow" : "red"};">${status}</p>
                    </section>
                </div>            
                `
            );
        } 
    } else {
        updateToDoDisplay();
    }
}

const clearInputFields = () => {
    taskTitle.value = "";
    dateInput.value = "";
    taskStatus.value = "Pending";
    taskId.innerText = "";
    description.value = "";
}

const addNewItem = () => {
    clearInputFields();
    submitButton.innerHTML = "Submit";
    deleteTaskButton.classList.add("hidden");
    displayPanel();
    filterTasks();
}

const displayPanel = () => {
    taskPanel.classList.remove("hidden");
}

const hidePanel = () => {
    taskPanel.classList.add("hidden");
}

submitButton.addEventListener("click", createAndUpdateTask);
addTaskButton.addEventListener("click", addNewItem);
exitButton.addEventListener("click", hidePanel);
deleteTaskButton.addEventListener("click", () => {
    deleteTask(taskId.innerText);
});
// Asked chatgpt for useEffect counterpart in vanilla JS, 
// However, hooks don't exist in pure JavaScript
// so adding an event listener to the searchbar everytime there is input basically does the same
searchBar.addEventListener("input", () => {
    filterTasks();
})